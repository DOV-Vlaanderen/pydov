---
name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "0 8 * * 2"

jobs:
  tests-linux:
    name: "Tests on ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install Fiona from source"
        if: ${{ matrix.python-version == '3.10' }}
        run: |
          sudo apt-add-repository ppa:ubuntugis/ppa
          sudo apt-get update
          sudo apt-get install gdal-bin libgdal-dev
          python -m pip install --upgrade cython
          python -m pip install --no-binary fiona fiona
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"

  tests-windows:
    name: "Tests on ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"

  tests-conda:
    name: "Tests with conda (${{ matrix.python-version }} on ${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: "actions/checkout@v2"
      - uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          allow-softlinks: true
          channel-priority: flexible
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: pydov
      - name: Install package dependencies with conda
        shell: pwsh
        run: |
          conda update -n base -c defaults conda
          conda install --name pydov --file requirements.txt
          conda install --name pydov fiona>=1.8.18 geopandas
          conda list
      - name: Install development dependencies with pip
        shell: pwsh
        run: |
          pip install -r requirements_dev.txt
          conda list
      - name: Run unit tests
        shell: pwsh
        run: |
          python -m pytest

  update-data:
    name: "Updated data on ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8"]
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox -e 'update-oefen, update-productie'"

  flake8:
    name: "Flake8 on ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8"]
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox -e 'flake8'"

  docs:
    name: "Docs on ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8"]
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install pandoc"
        run: sudo apt install pandoc
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox -e 'docs'"
